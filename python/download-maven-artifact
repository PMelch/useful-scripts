#!/usr/bin/env python

from lxml import etree
from urllib2 import Request, urlopen, URLError, HTTPError
import os
import hashlib
import sys
import getopt

__doc__ = """
   Usage:
   %s <options> Maven-Coordinate filename
   Options:
     -m <url> --maven-server=<url>     
     
   Maven-Coordinate are defined by: http://maven.apache.org/pom.html#Maven_Coordinates
      The possible options are:
      - groupId:artifactId:version
      - groupId:artifactId:packaging:version
      - groupId:artifactId:packaging:classifier:version
    filename is optional. If not supplied the filename will be <artifactId>.<extension>

   Example:
     %s "org.apache.solr:solr:war:3.5.0"
  """


class Artifact(object):
    def __init__(self, group_id, artifact_id, version, classifier=None, extension=None):
        if not group_id:
            raise ValueError("group_id must be set")
        if not artifact_id:
            raise ValueError("artifact_id must be set")

        self.group_id = group_id
        self.artifact_id = artifact_id
        self.version = version
        self.classifier = classifier
        if not extension:
            self.extension = "jar"
        else:
            self.extension = extension

    def is_snapshot(self):
        return self.version.endswith("SNAPSHOT")

    def path(self, with_version=True):
        base = self.group_id.replace(".", "/") + "/" + self.artifact_id
        if (with_version):
            return base + "/" + self.version
        else:
            return base

    def get_filename(self, filename=None):
        if filename == None:
            filename = self.artifact_id + "." + self.extension
        return filename

    def __str__(self):
        if self.classifier != None:
            return "%s:%s:%s:%s:%s" % (self.group_id, self.artifact_id, self.extension, self.classifier, self.version)
        elif self.extension != "jar":
            return "%s:%s:%s:%s" % (self.group_id, self.artifact_id, self.extension, self.version)
        else:
            return "%s:%s:%s" % (self.group_id, self.artifact_id, self.version)

    @staticmethod
    def parse(input):
        parts = input.split(":")
        if len(parts) >= 3:
            g = parts[0]
            a = parts[1]
            v = parts[len(parts) - 1]
            t = None
            c = None
            if len(parts) == 4:
                t = parts[2]
            if len(parts) == 5:
                c = parts(2)
                t = parts(3)
            return Artifact(g, a, v, c, t)
        else:
            return None


class MavenDownloader:
    def __init__(self, base="http://repo1.maven.org/maven2"):
        if base.endswith("/"):
            base = base.rstrip("/")
        self.base = base
        self.user_agent = "Maven Artifact Downloader/1.0"

    def _find_latest_version_available(self, artifact):
        path = "/%s/maven-metadata.xml" % (artifact.path(False))
        xml = self._request(self.base + path, "Failed to download maven-metadata.xml", lambda r: etree.parse(r))
        v = xml.xpath("/metadata/versioning/versions/version[last()]/text()")
        if v:
            return v[0]

    def find_uri_for_artifact(self, artifact):
        if artifact.is_snapshot():
            path = "/%s/maven-metadata.xml" % (artifact.path())
            xml = self._request(self.base + path, "Failed to download maven-metadata.xml", lambda r: etree.parse(r))
            basexpath = "/metadata/versioning/"
            p = xml.xpath(basexpath + "/snapshotVersions/snapshotVersion")
            if p:
                return self._find_matching_artifact(p, artifact)
        else:
            return self._uri_for_artifact(artifact)

    def _find_matching_artifact(self, elems, artifact):
        filtered = filter(lambda e: e.xpath("extension/text() = '%s'" % artifact.extension), elems)
        if artifact.classifier != None:
            filtered = filter(lambda e: e.xpath("classifier/text() = '%s'" % artifact.classifier), elems)

        if len(filtered) > 1:
            print(
            "There was more than one match. Selecting the first one. Try adding a classifier to get a better match.")
        elif len(filtered) == 0:
            print("There were no matches.")
            return None

        elem = filtered[0]
        value = elem.xpath("value/text()")
        return self._uri_for_artifact(artifact, value[0])

    def _uri_for_artifact(self, artifact, version=None):
        if artifact.is_snapshot() and version == None:
            raise ValueError("Expected uniqueversion for snapshot artifact " + str(artifact))
        elif not artifact.is_snapshot():
            version = artifact.version
        return self.base + "/" + artifact.path() + "/" + artifact.artifact_id + "-" + version + "." + artifact.extension

    def _request(self, url, failmsg, f):
        headers = {"User-Agent": self.user_agent}
        req = Request(url, None, headers)
        try:
            response = urlopen(req)
        except HTTPError, e:
            print(failmsg + " because of " + str(e))
            print("Tried url " + url)
        except URLError, e:
            print(failmsg + " because of " + str(e))
            print("Tried url " + url)
        else:
            return f(response)


    def download(self, artifact, filename=None):
        filename = artifact.get_filename(filename)
        if not artifact.version:
            artifact = Artifact(artifact.groupId, artifact.artifactId, self.find_latest_version_available(artifact),
                artifact.classifier, artifact.extension)

        url = self.find_uri_for_artifact(artifact)
        if not self.verify_md5(filename, url + ".md5"):
            print("Downloading artifact " + str(artifact))
            response = self._request(url, "Failed to download artifact " + str(artifact), lambda r: r)
            if response:
                with open(filename, 'w') as f:
                    f.write(response.read())
                print("Downloaded artifact %s to %s" % (artifact, filename))
                return True
            else:
                return False
        else:
            print("%s is already up to date" % artifact)
            return True


    def verify_md5(self, file, remote_md5):
        if not os.path.exists(file):
            return False
        else:
            localMD5 = self.localMD5(file)
            remote = self._request(remoteMD5, "Failed to download MD5", lambda r: r.read())
            return localMD5 == remote

    def local_md5(self, file):
        md5 = hashlib.md5()
        with open(file, 'rb') as f:
            for chunk in iter(lambda: f.read(8192), ''):
                md5.update(chunk)
        return md5.hexdigest()


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "m:", ["maven-server="])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    if len(args) == 0:
        print "No maven coordiantes supplied"
        usage()
        sys.exit(2)
    else:
        options = dict(opts)
        base = options.get("-m")
        if not base:
            base = options.get("--maven-server")
        if not base:
            base = "http://repo1.maven.org/maven2"
        downloader = MavenDownloader(base)

        artifact = Artifact.parse(args[0])

        filename = None
        if len(args) == 2:
            filename = args[1]

        if downloader.download(artifact, filename):
            sys.exit(0)
        else:
            usage()
            sys.exit(1)


def usage():
    basename = os.path.basename(sys.argv[0])
    print(__doc__ % (basename, basename))

if __name__ == '__main__':
    main()
